
1. Instalação do Python
	- https://www.python.org/
	- Após o download ser finalizado, abra-o e logo na primeira tela é importante marcar a checkbox Add Python 3.5 to PATH. Essa opção é importante para conseguirmos executar o Python dentro do Prompt de Comando do Windows.


2. Testando o Python
	Terminada a instalação, podemos testar se o Python foi instalado corretamente. Podemos abrir o Prompt de Comando e executar o seguinte comando:

	--> (via cmd) python --version


3. Instalação do PIP
- PIP (Python Package Index) é um sistema de Gerenciamento de pacotes para Python

- Documentação -> https://pip.pypa.io/en/latest/installation/#get-pip-py

--> Se o seu ambiente Python não tiver o pip instalado, há 2 mecanismos para instalar o pip suportados diretamente pelos mantenedores do pip:
	
	- "ensurepip"
	- "get-pip.py"



	Abra o CMD/prompt ou terminal:

	Para sistemas Windows: (comando para baixar o pip)

		--> (via cmd) curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py

		
	O comando "curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py" é usado para baixar o script Python get-pip.py diretamente da URL https://bootstrap.pypa.io/get-pip.py e 				salvar localmente com o nome get-pip.py.


	Comando para instalar o pip

		--> (via cmd) python get-pip.py 

	O comando "python get-pip.py" é utilizado para executar o script Python get-pip.py.



CURL

Explicação do comando:

curl: 
	É o comando utilizado para transferir dados de ou para um servidor, utilizando um dos protocolos suportados (como HTTP, HTTPS, FTP, etc.).

https://bootstrap.pypa.io/get-pip.py: 
	É o URL de onde o arquivo get-pip.py será baixado. Neste caso, ele está apontando para o servidor do projeto pip no domínio pypa.io, que é onde os scripts de instalação do pip são hospedados oficialmente.

-o get-pip.py: 
	É uma opção do curl que especifica onde o arquivo baixado deve ser salvo localmente. Neste caso, o arquivo será salvo no diretório atual com o nome get-pip.py.


O curl (abreviação de "Client URL") é uma ferramenta poderosa e versátil para transferência de dados com URLs

Exemplo simples de uso do curl para baixar um arquivo:
	curl -O https://example.com/arquivo.txt


Atualização do pip (via ambiente virtual em execução, para o Python 3)
	- comando -> pip3 install --upgrade pip



4. (OPCIONAL, Caso queira criar o ambiente virtual via virtualenv) virtualenv (pip install virtualvenv é o comando para instalar a ferramenta e não para criar o ambiente virtual)

	O virtualenv é uma ferramenta em Python que permite criar ambientes virtuais isolados para gerenciar dependências de projetos.
	Ao decorrer do curso iremos utilizar um ambiente virtualizado chamado virtualenv para construir os projetos da aula. Você pode instalar a virtualenv com o seguinte comando:

		(Comando que permite instalar o virtualenv)
		O comando pip install virtualenv é utilizado para instalar a ferramenta virtualenv através do pip, que é o gerenciador de pacotes do Python.


	2 formas de instalação:
	comandos:

	- pip install virtualenv
		-> instala globalmente o pacote virtualenv no sistema
	

	
pip list

O comando -> "pip list" Exibe as depedências instaladas

	--> (via cmd) pip list

versão do virtualenv
	- python -m virtualenv --version
		

5. Criação do Projeto 
	- Crie uma pasta para seu projeto 
	- Abra o VSC, vincule a pasta do projeto ao vsc 

6. Abra o cmd na pasta do projeto

	Exemplo:
	
	D:\Python\Projeto_djanjo_2

	
7. Criação um ambiente Virtual

	Abaixo será criado o ambiente virtual chamado "myenv"
	
	--> (via cmd) python -m venv myenv
		
	o "myenv" é o nome do ambiente

	ou via virtualenv

	--> (via cmd) virtualenv myenv
 

Esse comando irá isolar os pacotes neste projeto. Foi criado com o comando acima o diretório "myenv" com as sub-pastas Lib e Scripts


8. Ativar o myenv

	--> (via cmd) myenv\Scripts\activate
	
Para desativá-lo execute o comando:
	
	--> (via cmd) deactivate

Após executar o comando de ativação do venv irá abrir no terminal o ambiente virtual

	Exemplo:
	(myenv) C:\Users\nelci.mpjunior\OneDrive - SENAC - SP\Documentos\Python-2-Django\ProjetoDjango>



9. Instalação do Django no myenv

	Ao utilizar o comando "pip install django" para instalar o Django, o pip baixa e instala todos os pacotes necessários para o funcionamento do Django e suas dependências. 
	No entanto, ele não cria arquivos diretamente relacionados ao seu projeto Django. 
	A instalação do Django adiciona o pacote Django ao ambiente Python global ou virtual onde você está trabalhando.
		No ambiente virtual -> 	myenv/site-packages/django


	--> (via cmd) py -m pip install Django
		O comando acima instala o Django em um ambiente virtual específico ou em uma versão específica do Python, se houver várias versões instaladas.

	ou

	--> (via cmd) pip install django
		Aqui o pacote Django é instalado globalmente 


Onde o Django é instalado

		O Django foi instalado na pasta lib/site-packages/django


10. Exibir as depedências instaladas
	--> (via cmd) py -m pip freeze
	
Resultado 

asgiref==3.8.1
Django==5.0.7
sqlparse==0.5.0
tzdata==2024.1




=============================================


11. Boa prática, criar o arquivo requirements.txt para que seja salvo as dependências do projeto
	--> (via cmd) py -m pip freeze > requirements.txt

Após a execução do comando, verifique no projeto o arquivo criado

=============================================


12. Criação do Projeto Django - Será criado o projeto Django com o nome "setup"

	Iniciar o projeto ( django-admin startproject setup . ) - Será criada uma pasta chamada "setup", dentro do projeto, com as configurações do mesmo.
	
	--> (via cmd) django-admin startproject setup . (Esse ponto é para não criar sub-pastas)

Foi criado a pasta "setup" no projeto e o arquivo "manage.py"


Arquivos do "setup"

-  __init__.py  é um arquivo que serve para indicar que o diretório em que está contido deve ser tratado como um pacote. Se não tiver esse arquivo o diretório não é tratado como pacote e não será possível importar os módulos desse diretório

- manage.py - manage indica "gerenciamento" - Esse arquivo é utilizado para realizar várias tarefas referentes ao gerenciamento da aplicação

- _pycache_ - utilizado para armazenar dados da aplicação durante os processos de execução para melhor desempenho do projeto

- settings.py - settings indica "configurações" - arquivo referente as configurações do projeto

- asgi.py - O asgi.py é responsável por configurar a interface ASGI (Asynchronous Server Gateway Interface) para aplicações Django. Serve para a operação de aplicações Django com servidores assíncronos, permitindo que o Django lide com um maior número de conexões simultâneas e utilize funcionalidades modernas da web em tempo real, como chats ou notificações instantâneas.
	
	*** o ASGI (Asynchronous Server Gateway Interface) pode ser visto como uma evolução do WSGI (Web Server Gateway Interface)
	*** WSGI: É um padrão síncrono, As requisições são processadas uma por vez.
	*** ASGI: É assíncrono, permitindo que múltiplas requisições sejam processadas simultaneamente.

- wsgi.py no Django é responsável por configurar a interface WSGI (Web Server Gateway Interface) para a aplicação. O WSGI é um padrão que define como um servidor web se comunica com aplicações web em Python. 

- urls.py - Esse arquivo é responsável por definir as rotas (ou URLs) da aplicação.

=============================================

13. --> (via cmd) Django-admin help -> Visualizar todos os comando que podemos executar na ferramenta.

=============================================

14. Sobre o Arquivo mange.py (manage indica "gerenciamento")

O arquivo manage.py é um script Python que vem com projetos Django. Ele é utilizado para realizar várias tarefas relacionadas à administração do projeto. O manage.py simplifica muitas operações comuns, permitindo que você interaja com o sistema do Django de forma mais fácil e eficiente.

Algumas das tarefas comuns que você pode executar usando o manage.py incluem:

Executar o servidor de desenvolvimento:
	- python manage.py runserver

Criar migrações e aplicar alterações ao banco de dados:
	- python manage.py makemigrations
	- python manage.py migrate

Criar um superusuário para o admin do Django:
	python manage.py createsuperuser

Criar um aplicativo Django:
Cria a estrutura inicial de um novo aplicativo Django.	
	- python manage.py startapp nome_do_aplicativo

	Em Django, um "aplicativo" (ou "app") refere-se a uma parte modular e autossuficiente de um projeto Django. Cada aplicativo é projetado para realizar uma função específica dentro do projeto maior.

Executa os testes definidos em sua aplicação Django.
	python manage.py test



=============================================


15. Executar o projeto
	--> (via cmd) python manage.py runserver

Copie a url do server gerada e cole no navegador

	**** Atenção: A execução do Python no navegador é apenas uma tela do próprio Python, ainda não tem um template na aplicação com a tela inicial do projeto, será criado mais a frente.


obs *** Problema de MIGRAÇÃO no Python 
	Correção: python manage.py migrate


=======================================================

16. Alterar o TimeZone e o Idioma do projeto

- As informações da página estão em Inglês e o TimeZone também não é o de São Paulo
	- Abra a pasta setup e o arquivo settings.py e edite as linhas abaixo:

	LANGUAGE_CODE = 'pt-br'

	TIME_ZONE = 'America/Sao_Paulo'

Pare o projeto no cmd -> ctrl + c 
e Inicie novamente com o comando -> python manage.py runserver

Pronto, atualize o navegador! E as informações estarão em Português!


=============================================




17. Criação de um app no Django
	Um "app" no Django é como um módulo que adiciona funcionalidades específicas, como usuários ou blogs, ao seu projeto web. Cada app é independente, facilitando a organização e reuso do código.

	Comando para criar app

	--> (via cmd) python manage.py startapp core

Ao criar o app, é criado um diretório no projeto com o nome do app



Após a criação do App tem que inserí-lo no arquivo de settings.py na raiz do projeto como foi colocado abaixo o "core"

projeto/setup/settings.py


	INSTALLED_APPS = [
    	'django.contrib.admin',
    	'django.contrib.auth',
    	'django.contrib.contenttypes',
    	'django.contrib.sessions',
    	'django.contrib.messages',
    	'django.contrib.staticfiles',
    	'core',
	]



Agora, No mesmo arquivo projeto/setup/settings.py informe o "templates" dentro de "DIRS" que será criado mais adiante


projeto/setup/settings.py


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]





OBS: Templates é um diretório que será criado no qual possuirá as páginas HTML


projeto/setup/settings.py

#Quando o DEBUG For False o Django irá procurar o arquivo index.html, e aí tem que ter a permissão no ALLOWED_HOST
# DEBUG = True -> Modo de Desenvolvimento
# DEBUG = False -> Modo de Produção

#DEBUG = True
#ALLOWED_HOSTS = []

DEBUG = False
ALLOWED_HOSTS = ['*']



Arquivos dentro do app "core"

-  __init__.py  é um arquivo que serve para indicar que o diretório em que está contido deve ser tratado como um pacote. Se não tiver esse arquivo o diretório não é tratado como pacote e não será possível importar os módulos desse diretório

- _pycache_ - utilizado para armazenar dados da aplicação durante os processos de execução para melhor desempenho do projeto


- O diretório migrations é onde são armazenadas as migrações de banco de dados. 
	*** As migrações são arquivos que contêm instruções para alterar a estrutura do banco de dados, como criar ou modificar tabelas e campos, as migrações são criadas pelo próprio python 	a partir dos "models"


	1. Exemplo de model 

	*************

	from django.db import models

	class Products (models.Model):
    		name = models.CharField('Nome', max_length=100)
    		price = models.DecimalField('Preço', decimal_places=2, max_digits=8)
    		stock = models.IntegerField('Quantidade em Estoque')

	2. Após criar o model, deverá ser criado a migration via cmd com o comando

		--> (via cmd)  python manage.py makemigrations

	3. Exemplo de Migration Criada:

		arquivo 0001_initial.py

		from django.db import migrations, models


		class Migration(migrations.Migration):

		    initial = True

		    dependencies = [
    			]

		    operations = [
        		migrations.CreateModel(
            		name='Products',
            		fields=[
                	('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                	('name', models.CharField(max_length=100, verbose_name='Nome')),
                	('price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Preço')),
                	('stock', models.IntegerField(verbose_name='Quantidade em Estoque')),
            		],
        		),
    		]


- admin.py - O arquivo admin.py em um aplicativo Django é onde você registra modelos (models) para serem gerenciados através da interface administrativa do Django.

- apps.py - O arquivo apps.py é usado para configurar a aplicação, por ex: "core" no projeto.
	
	Arquivo apps.py com o "core" configurado

	*******
	from django.apps import AppConfig

	class CoreConfig(AppConfig):
		default_auto_field = 'django.db.models.BigAutoField'
    		name = 'core'


- models.py - arquivo para criação dos models do app (configuração das tabelas do banco de dados)
	Exemplo de model 

	*************

	from django.db import models

	class Products (models.Model):
    		name = models.CharField('Nome', max_length=100)
    		price = models.DecimalField('Preço', decimal_places=2, max_digits=8)
    		stock = models.IntegerField('Quantidade em Estoque')

- urls.py - Configuração das rotas -> Ex: www.projetodjango.com/contato

- views.py - Configuração das funções de views do Projeto
	Exemplo de Views 


	from django.shortcuts import render

	# Create your views here.
	# Funções com as Rotas 
	# - Função index faz a requisição no arquivo index.html
	# - Função contato faz a requisição no arquivo contato.html

	def index (request):
    		context = {
        	'curso' : 'Programação Web com Django'
    		}
    		return render(request, 'index.html', context)


	def contato (request):
    		return render(request, 'contato.html')	


- tests.py - utilizado para escrever testes automatizados
=======================================


18. Criação do diretório Templates na raiz do projeto

	Crie os arquivos 
	- index.html (Crie a codificação inicial do html no projeto com a tag <h2> index, Home - Python </h2>)
	- contato.html (Crie a codificação inicial do htmo no projeto com a tag <h2> contato - Python </h2>) 

dentro de templates


=======================================



19. Edição do arquivo views.py em core -> core/views.py

	*******

from django.shortcuts import render

# Create your views here.
# São funções para as rotas

def index (request):
    return render(request, 'index.html')

def contato (request):
    return render(request, 'contato.html')




=======================================

=======================================


20. Edição das Rotas no arquivo urls.py dentro de setup

	- projeto/setup/urls.py


(...)



from django.contrib import admin
from django.urls import path, include
#foi feito o importe do "include" acima

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('core.urls')),
]

# o código "path('', include('core.urls'))," é que qualquer solicitação na raiz do projeto seja redirecionada para o core.urls


==========================================

==========================================

21. Crie o arquivo urls.py dentro de core

	core/urls.py

*******


from django.urls import path
#foi feito o importe do include acima

#import das views index e contato criadas no core/views
from core.views import index, contato

urlpatterns = [
    path('', index),
    path('contato', contato),
]

# acima o "path('', index)" indica que quando acessar a raiz do site será chamado a view index
# o "path('contato', contato)" indica que quando acessar a rota contato será chamado a view contato


=========================================


=========================================

22. Execute o projeto

	- via cmd, acesse a pasta do projeto
	--> (via cmd) venv\Scripts\activate
	--> (via cmd) python manage.py runserver

obs: "venv" é o nome do ambiente virtual

=========================================


Resumo da Aplicação:

setup
	-> setup é o nome do projeto criado no Django com o comando "django-admin startproject setup ." (Esse ponto é para não criar sub-pastas)

setup/settings.py
	-> Nesse arquivo foram feitas várias configurações como: DEBUG, DIRS "templates", TIME_ZONE, STATIC_URL

setup/urls.py
	-> Nesse arquivo foram feitas configurações para as rotas tanto do admin quanto para o site através dos path abaixo "path('admin/', admin.site.urls)" e "path('', include('core.urls'))"

	******

	from django.contrib import admin
	from django.urls import path, include
	#foi feito o importe do include acima

	#import das views, função index e contato criadas no core/views
	from core.views import index, contato

	urlpatterns = [
    		path('admin/', admin.site.urls),
    		path('', include('core.urls')),
	]

	obs: o path "path('', include('core.urls'))" com o core.urls (Este não foi criado pela ferramenta, foi criado para receber as rotas e manter o sistema melhor organizado)



templates
	-> Diretório criado para receber os arquivos html


core
	-> Foi o aplicativo instalado com o comando "python manage.py startapp core"	


core/views.js
	-> Foram criadas as views, funções com as rotas

	****

	from django.shortcuts import render

	# Funções com as Rotas 
	# - Função index faz a requisição no arquivo index.html
	# - Função contato faz a requisição no arquivo contato.html
	
	def index (request):
    		return render(request, 'index.html')

	def contato (request):
    		return render(request, 'contato.html')



core/urls.js
	*****

	from django.urls import path, include
	#foi feito o importe do include acima

	#import das views index e contato criadas no core/views
	from core.views import index, contato
	#Rota na url 
	# - Quando acessar a rota "raiz do site" ele chama a função index
	# - Quando acessar a rota "contato" ele chama a função contato

	urlpatterns = [
    		path('', index),
    		path('contato', contato),
	]



=========================================

=============================================

PADRÃO MTV DO DJANGO

O "padrão MTV" no contexto do Django refere-se à estrutura de organização de código que o framework utiliza para desenvolvimento web. MTV é um acrônimo que significa Model-Template-View, que é a versão do Django do padrão MVC (Model-View-Controller).

Aqui está o significado de cada parte do padrão MTV no Django:

Model (Modelo): Representa a estrutura de dados. Em Django, os modelos são classes Python que definem os tipos de dados e a estrutura do banco de dados. Cada modelo geralmente corresponde a uma tabela no banco de dados relacional.

Template (Template): É a camada responsável pela apresentação visual dos dados. Os templates em Django são arquivos HTML que incluem variáveis e tags especiais que permitem a incorporação de dados dinâmicos gerados pelas views.

View (Visão): É a camada que processa as requisições do usuário e retorna as respostas. As views em Django são funções ou classes Python que recebem uma requisição HTTP e retornam uma resposta HTTP, geralmente após realizar algum processamento dos dados do modelo e renderizar um template.


Comparação entre MVC e MTV

Ambos possuem componentes que correspondem a partes semelhantes de uma aplicação:

Model: Representa a estrutura de dados e a lógica de negócios.
View/Template: Responsável pela apresentação visual dos dados.
Controller/View: Lida com a lógica de processamento e interação.


=============================================




23. Passando um contexto para o templates via views 

#MODO 1

- core/views.py

	******

	from django.shortcuts import render

	# Create your views here.
	# Funções com as Rotas 
	# - Função index faz a requisição no arquivo index.html
	# - Função contato faz a requisição no arquivo contato.html
	
	def index (request):
    		context = {
        	'curso' : 'Programação Web com Django'
    	}
    	return render(request, 'index.html', context)

	def contato (request):
    		return render(request, 'contato.html')



- templates/index.html

	<body>
    		<h2>
        		Index, Home - Python
    		</h2>

    		<p>
        		{{curso}}
    		</p>

	</body>






#MODO 2


- core/views.py


from django.shortcuts import render

# Create your views here.

def index (request):
    context = {
        'courses': 'Programação de Computadores no SENAC GUA',
        'languages': ['Python', 'Java', 'C#', 'JavaScript'],
        'news': [
            {
                'title': 'Nova versão do Django lançada!',
                'subtitle': 'Confira as novidades da versão 3.0',
                'text': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla convallis libero ut imperdiet vehicula.'
            },
            {
                'title': 'Python é a linguagem do futuro',
                'subtitle': 'Especialistas afirmam que Python está dominando o mercado',
                'text': 'Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.'
            },
            {
                'title': 'JavaScript: O que esperar do ES10?',
                'subtitle': 'Novas funcionalidades e melhorias na performance',
                'text': 'Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.'
            }
        ]
    }
    return render(request, 'index.html', context)



def contato (request):
    return render(request, 'contato.html')




- templates/index.html

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
</head>

<body>
    <h1>
        Home - Django
    </h1>

    <hr>

    <h2>{{ courses }}</h2>

    <hr>

    <h2>Linguagens de Programação</h2>
    {{ languages }}
    <hr>
    1 valor da Lista: <b> {{ languages.2 }} </b>
    <hr>
    <ul>
        {% for language in languages %}
        <li>{{ language }}</li>
        {% endfor %}
    </ul>

    <hr>

    <h2>Notícias</h2>
    {{ news }}
    <hr>
    {% for new in news %}
    <div class="noticia">
        <h3>{{ new.title }}</h3>
        <h4>{{ new.subtitle }}</h4>
        <p>{{ new.text }}</p>
    </div>
    {% endfor %}
</body>

</html>





=========================================



24. Arquivos estáticos no Django

	setup/settings -> no final deste arquivo tem o link da documentação e a Constante dos arquivos estáticos
	
	# Static files (CSS, JavaScript, Images)
	# https://docs.djangoproject.com/en/5.0/howto/static-files/

	#STATIC_URL = 'static/' é usado no Modo de Desenvolvimento
	STATIC_URL = 'static/'

	#No modo de Produção é usado a constante abaixo "STATIC_ROOT"
	#Produção ou Desenvolvimento -> Vai depender do DEBUG
	#Criação da Constante STATIC_ROOT (Não vem no framework, tem que criar)

	STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

	#OBS: importe o path e o os no início do arquivo
	#from pathlib import Path, os

------------------------------


Criação do diretório static

- Clique com o botão direito do mouse sobre "core" -> new folder e crie o diretório "static"

- Dentro de "static" crie os diretório e os arquivos
	- css
		-> styles.css
	- js
	- images

=================================================

25. Importe os arquivos estáticos para as páginas html dentro de "templates"

OBS: É Necessário inserir o carregamento de arquivos estáticos no início do arquivo html

	-> {% load static %}

template/index.html

*************

{% load static %}
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
</head>
<body>
    <h2>
        Index, Home - Python
    </h2>

    <p>
        {{curso}}
    </p>
</body>
</html>


**************

static/css/styles.css


body {
    background-color: #ccc;
}



Teste o projeto


==========================================

26. Inserção de Imagens no Projeto

	
Insira a imagem dentro da pasta static/images

	tag html com a imagem    ->   <img src="{% static 'images/guitar.jpg' %}" alt="Guitar"> 


==========================================

27. Inserção de arquivo Javascript no Projeto

	- Crie o arquivo static/js/scripts.js

Faça a conexão do templates/index.html com o js
	
	-> <script type="text/javascript" src="{% static 'js/scripts.js' %}"></script>
	
Crie a função no arquivo de "scripts.js"

	function f_teste(){
    		alert("Teste de Conexão com o Javascript")
	}


Crie o botão com onclick no html para chamar a função em Javascript

	templates/index.html

	<button onclick="f_teste()"> Função JS </button>

=============================================



templates/index.html

************



{% load static %}
<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
</head>

<body>
    <h2>
        Index, Home - Python
    </h2>

    <p>
        {{curso}}
    </p>

    <img src="{% static 'images/guitar.jpg' %}" alt="Guitar">

    <hr/>
    <button onclick="f_teste()"> Função JS </button>

</body>

<script type="text/javascript" src="{% static 'js/scripts.js' %}"></script>

</html>


=============================================


28 - models

Documentação -> https://docs.djangoproject.com/en/5.0/topics/db/models/

** OBS: O Python possui o próprio banco de dados (db.sqlite3), está configurado no arquivo "setup/settings"

		(....)
		DATABASES = {
    			'default': {
        		'ENGINE': 'django.db.backends.sqlite3',
        		'NAME': BASE_DIR / 'db.sqlite3',
    			}
		}
		(...)

----------------

Criação do model "Products"

core/models

******

from django.db import models

# Create your models here.

class Products (models.Model):
    name = models.CharField('Nome', max_length=100)
    price = models.DecimalField('Preço', decimal_places=2, max_digits=8)
    stock = models.IntegerField('Quantidade em Estoque')

    #A função abaixo é para retornar o name do produto na exibição dentro do painel admin
    def __str__(self):
        return self.name

    # Outra opção de exibição, está comentado abaixo 
	'''
    def __str__(self):
        return f"{self.name} - R$ {self.price:.2f}"
	'''  



Após criar o model, deverá ser criado a migration via cmd com o comando

-->>  python manage.py makemigrations


Se for executado corretamente aparecerá a seguinte mensagem no cmd:

Migrations for 'core':
  core\migrations\0001_initial.py
    - Create model Products



Foi criado dentro de core/migrations o arquivo "0001_initial.py", essa é a migration com o name Produtcts

Após criar a migrate, deverá ser executada a migrate com o comando:

-->> python manage.py migrate


obs:  o atributo "CharFied" para texto é equivalente ao varchar no banco de dados e possui obrigatóriamente a referencia de max_lenght.
	Em caso de precisar de um número de caracteres maior deve ser usado o atributo "models.TextField()"
	Ex: description = models.TextField()



=================================================

29  - dbbrowser

	https://sqlitebrowser.org/dl/

Ao instalar o dbbrowser será possível visual o banco de dados do python -> Execute a instalação do dbbrowser, após abra o bando de dados sqlite da aplicação python via dbbrowser -> botão direito do mouse sobre o banco -> abrir com dbbrowser



OBS: Sempre que criar um novo model, execute o comando para criar a migrate e o comando para executar a migration


=================================================


30. Painel admin do Django

- Acesse a url:	http://127.0.0.1:8000/admin

=================================================

31. Criação do Usuário para acesso ao painel administrativo

	(Pare o projeto ctrl + c se o mesmo estiver executando para criar o super usuário)

	- python manage.py createsuperuser


	O sistema irá solicitar as informações do novo usuário:

	Usuário (Se não colocar usuário, ele usará o usuário padrão do seu projeto): nelci (nelci é o usuário do professor)
	E-mail (Pode ser qualquer e-mail, não tem validação): nelcijunior@yahoo.com.br (nelcijunior@yahoo.com.br é o e-mail do professor)
	Password (A senha não é exibida a digitação):
	Confirmação de Senha(A senha não é exibida a digitação):


Após a criação do usuário o sistema irá exibir a mensagem: "Superuser created successfully."
	

	Execute o projeto novamente e acesse a url do admin

	- (via cmd) python manage.py runserver

	- http://127.0.0.1:8000/admin

	user:
	pass:


-->> BEM VINDO A TELA DE ADMINISTRAÇÃO DO SISTEMA DJANGO

OBS: Essa tela de admin existe por conta do arquivo de configuração "projeto/settings.py" está carregado os módulos referentes ao admin, validação de usuário e sessão...


	INSTALLED_APPS = [
    	'django.contrib.admin',
    	'django.contrib.auth',
    	'django.contrib.contenttypes',
    	'django.contrib.sessions',
    	'django.contrib.messages',
    	'django.contrib.staticfiles',
    	'core',
	]


=========================================================

32. Inserindo o model criado no projeto ao admin do Django

Edite o arquivo "admin.py" dentro de "core" para ser vinculado ao admin do Django

	core/admin.py
	*******

	from django.contrib import admin

	# Register your models here.

	from .models import Products

	admin.site.register(Products)



Crie um novo Model, execute o migrate, edite o arquivo "core/admin" com o novo model e verifique o resultado no admin do projeto

	1. Criação de um novo model dentro do arquivo "core/models.py"

	****

	from django.db import models

	# Create your models here.

	class Products (models.Model):
    		name = models.CharField('Nome', max_length=100)
    		price = models.DecimalField('Preço', decimal_places=2, max_digits=8)
    		stock = models.IntegerField('Quantidade em Estoque')

    		#A função abaixo é para retornar o name do produto na exibição dentro do painel admin
    		def __str__(self):
       		return self.name
		'''
   		def __str__(self):
        		return f"{self.name} - R$ {self.price:.2f}"
		'''    

	class Blogs (models.Model):
    		title = models.CharField('Título', max_length=100)
    		subtitle = models.CharField('Sub-Título', max_length=100)
    		description = models.TextField()

    		#A função abaixo é para retornar o name do produto na exibição dentro do painel admin
    		def __str__(self):
       			return self.title


	2. Após criar o model, deverá ser criado a migration via cmd com o comando

	-->> (via cmd)  python manage.py makemigrations

	Se executar corretamente deverá ser exibido a mensagem abaixo:
	
		Migrations for 'core':
  			core\migrations\0002_blogs.py
    			- Create model Blogs


	

	Foi Criado dentro do "core/migrations" o arquivo "0002_blogs.py"

	
	Após criar a migrate, deverá ser executada a migrate com o comando:

	-->> (via cmd) python manage.py migrate

	
	Se executar corretamente deverá ser exibido a mensagem abaixo:

		Operations to perform:
  		Apply all migrations: admin, auth, contenttypes, core, sessions
		Running migrations:
  			Applying core.0002_blogs... OK



	3. Edite o arquivo "core/admin.py" com o novo model "Blogs"

	*******

	from django.contrib import admin

	# Register your models here.

	from .models import Products, Blogs

	admin.site.register(Products)
	admin.site.register(Blogs)






	Execute o Projeto 

	-->> (via cmd) python manage.py runserver









	






		
























































