NODE -> AMBIENTE DE EXECUÇÃO JAVASCRIPT
NPM - NODE PACKAGE MANAGEMENT

Express -> É um framework para Node.js que irá nos auxiliar nas requisições do back-end
 
Usado para construir aplicativos web e APIs (Interface de Programação de Aplicações) em Node.js de forma fácil e eficiente com rotas, middleware e interações HTTP em geral.

REQUISIÇÕES HTTP -> POST (Envia) - GET (Retorna) - PUT(Update) - DELETE (Exclui) 

ROTA -> É o caminho (url) do projeto

--------------------------------------------------

1. Criar uma pasta node em documentos

2. INSTALAR  e Abrir o Node js Command Prompt

3. Acessar a pasta node pelo Node Js Command Prompt
	cd C:\Users\nelci.mpjunior\Documents\node

4. Versão do Node
	node -v 

5. Versão do npm
	npm -v
	10.2

6. Dentro da pasta node crie a pasta app_1 (Projeto app_1)

7. Acesse o a pasta app_1 via node js command prompt
	cd app_1

8. Criação de Projeto com o Node
	npm init
Irá fazer várias perguntas, dê enter

	package name: (app_1)
	version
	description: Primeiro Projeto Node
	entry point: index.js
	test command
	git repository
	keywords
	author: Nelci Mariano
	license:

9. Atualizar a versão do node (Caso necessário)
	npm install -g npm@10.5.0

10. Abrir o Visual Studio Code e vincular o projeto app_1
	File -> add folder to workspace - Procurar a pasta do projeto e clicar em add

11. No projeto criado, visualize o arquivo package.json
	Esse arquivo exibe informações do projeto

12. Criar o arquivo index.js
	Botão na pasta do projeto -> new file -> nomear o arquivo para index.js

13. Instalação do Express
	npm install express --save

14. Criação da *codificação inicial* do projeto no arquivo index.js

// Importe o express para o projeto
const express = require('express')
const app = express()

// Abrindo uma comunicação do server, na porta 4000
app.listen(4000, (error) => {
    if (error) {
        console.log('Servidor NÃO INICIADO')
    } else {
        console.log('Servidor INICIADO')
    }
})

15. Startar a aplicação via node js command prompt
	node index.js

16. Criação das rotas e chamada no navegador

const express = require('express')
const app = express()

//Rota 1
app.get('/', (req, res) => {
    res.send('Raiz do Projeto')
})

// Rota 2
app.get('/contato', (req, res) => {
    res.send('Página Contato')
})

// Rota 3 - Json
app.get('/sobre', (req, res) => {
    res.json(
        {
            "nome": "Nelci Mariano",
            "profissao": "Professor"
        }
    )
})

app.listen(4000, (error) => {
    if (error) {
        console.log('Servidor NÃO INICIADO' + error.message)
    } else {
        console.log('Servidor INICIADO')
    }
})


Pare a aplicação no node
	ctrl + c
e
Execute novamente via node
	node index.js

Abra o navegador e digite a rota
	http://localhost:4000/

Abra o navegador e digite a rota
	http://localhost:4000/contato



---------------------------------------

ATIVIDADE: CRIE UM PROJETO DO ZERO COM 3 ROTAS GET

---------------------------------------

Instalação do NODEMON

- Qualquer alteração no projeto até aqui é preciso parar o mesmo "ctrl + c" e atualizar o navegador
- O Nodemon é útil pois ele monitora os arquivos do projeto e reinicia automaticamente o servidor, com ele é preciso apenas atualizar o navegador

    npm install -g nodemon

Agora dê start no projeto com o comando
	
	nodemon index.js



------------------------------------

POST

// A linha abaixo permitirá requisições do body para o POST
app.use(express.json());

/*
Selecione no Insomnia na aba body um json e crie o arquivo json com o name para enviar
{
	"nome": "Java"
}

// POST
app.post('/alunos', (req, res) => {
    const nome = req.body.nome
    return res.send(nome)
})

app.post('/professores', (req, res) => {
    // Utilizando a desestruturação
    const { nome } = req.body
    return res.send(nome)
})



------------------------------------


//Criação do array cursos
let senac = ['Info', 'Adm', 'Logística', 'ST']

//Retorna todos os cursos
app.get('/lista-cursos', (req, res) => {
    return res.json(senac)
})

// Pegando apenas 1 curso
// localhost:4000/lista-cursos/0
app.get('/lista-cursos/:index', (req, res) => {
    const {index} = req.params;
    return res.json(senac[index]);
  })

----------------------------------------



// Inserir um novo curso
app.post('/inserir-cursos', (req, res) => {
    const {name} = req.body;
    senac.push(name)
    // Retorno dos dados via json
    return res.json(senac);
  })

//Atualizar um curso
app.put('/atualizar-cursos/:index', (req, res) => {
    // Pega o index do curso que será atualizado
    const {index} = req.params;
    // Pega o novo nome do curso
    const {name} = req.body;
    senac[index] = name
    // Retorno dos dados via json
    return res.json(senac);
  })


//Deletar um curso
  app.delete('/excluir-cursos/:index', (req, res) => {
    // Pega o index do curso que será deletado
    const {index} = req.params;
    // splice -> usado para remover elemento do array
    // splice(indice, qtd_elementos)
    senac.splice(index, 1)    
    // Retorno dos dados via json
    return res.json(senac);
  })



--------------------------------------------------------

COOKIE

// Cookie
// Instale o cookie-parser - cookie-parser é um middleware do Express para analisar cookies no cabeçalho HTTP
// npm install cookie-parser

// Instancia do cooke-parser
const cookieParser = require('cookie-parser');
//middleware no Express que é usado para analisar os cookies incluídos no cabeçalho da solicitação HTTP
app.use(cookieParser());

// Rota para definir o cookie
app.get('/set-cookie', (req, res) => {
    // objeto cookedData - Dados que queremos armazenar no cookie
    const cookieData = {
        username: 'nelcijunior',
        language: 'pt-br'
    };
    // Convertendo os dados para JSON
    const cookieJSON = JSON.stringify(cookieData);
    // Configurando o cookie - nome do cookie -> cookieName
    // maxAge (tempo de vida do cookie em milissegundos) e httpOnly (define se o cookie só pode ser acessado por HTTP)
    res.cookie('cookieName', cookieJSON, { maxAge: 3600000 });
    res.send('Cookie definido com sucesso!');
});

// Rota para visualizar os cookies
app.get('/get-cookies', (req, res) => {
    res.send(req.cookies);
});

// Rota para visualizar um cookie específico
app.get('/get-cookie', (req, res) => {
    const cookieName = req.cookies.cookieName;
    if (cookieName) {
        res.send(cookieName);
    } else {
        res.send('Cookie não encontrado');
    }
});


// Session
// npm install express-session
const session = require('express-session');

// Configuração do middleware de sessão
app.use(session({
  secret: 'seu_segredo_aqui', // Chave secreta, exclusiva para o express
  resave: false, // Não irá regravar a sessão
  saveUninitialized: true // saveUninitialized: true
}));

// Rota para definir a sessão
app.get('/set-session', (req, res) => {
  req.session.user = { username: 'nelcijunior', preferences: { theme: 'dark', language: 'pt-br' }};
  res.send('Sessão definida com sucesso!');
});

// Rota para acessar a sessão
app.get('/get-session', (req, res) => {
  const user = req.session.user;
  if (user) {
    res.send(user);
  } else {
    res.send('Sessão não encontrada');
  }
});

app.get('/logout', (req, res) => {
    // Destruir a sessão
    req.session.destroy(err => {
      if (err) {
        console.error('Erro ao encerrar sessão:', err);
        res.status(500).send('Erro ao encerrar sessão');
      } else {
        // Redirecionar o usuário para uma página de login ou página inicial
        res.redirect('/get-session');
      }
    });
  });




























